{"version":3,"sources":["Search.js","Photo.js","PhotoList.js","Nav.js","NotFound.js","config.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","state","text","onSearchChange","e","_this","setState","target","value","handleSubmit","preventDefault","props","onSearch","path","concat","history","push","currentTarget","reset","_this2","this","react_default","a","createElement","className","onSubmit","type","name","onChange","ref","input","search","placeholder","required","fill","height","viewBox","width","xmlns","d","Component","withRouter","Photo","src","url","alt","PhotoList","images","data","map","photo","src_Photo","key","id","farm","server","secret","title","match","params","Nav","searchText","innerText","react_router_dom","to","onClick","NotFound","apiKey","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","doSearch","fetch","then","response","json","resData","photos","catch","err","console","log","Search","src_Nav","react_router","exact","render","src_PhotoList","assign","component","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4792cfa3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './newIndex.css';\r\nimport {withRouter} from 'react-router-dom'\r\n\r\nclass SearchForm extends Component {\r\n    // State to get the value the user types\r\n    state = {\r\n        text: ''\r\n    }\r\n    \r\n    // Sets the value of the state to the input value\r\n    onSearchChange = e => {\r\n        this.setState({ text: e.target.value });\r\n    }\r\n\r\n    // Changes the url and page according to the search\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        // calls the onSearch function and passes the searched word as parameter\r\n        this.props.onSearch(this.state.text);\r\n        // adds the searched word to the path\r\n        let path =`/search/${this.state.text}`;\r\n        // adds current path to history object to change url\r\n        this.props.history.push(path);\r\n\r\n        //clear the input search field\r\n        e.currentTarget.reset();\r\n    }\r\n\r\n    render() {  \r\n        return ( \r\n            <form className=\"search-form\" onSubmit={this.handleSubmit}>\r\n                {/* Used ref to the value of the input */}\r\n                <input type=\"search\" name=\"searchText\" onChange={this.onSearchChange} ref={(input) => this.search = input} placeholder=\"Search\" required/>\r\n                <button type=\"submit\" className=\"search-button\">\r\n                <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\r\n                    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                </svg>\r\n                </button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\n// withRouter allows the component to have access to this.props.history\r\nexport default withRouter(SearchForm);","import React from 'react';\r\n\r\nconst Photo = props => {\r\n    return ( \r\n        <li> \r\n            <img src={props.url} alt={props.alt} /> \r\n        </li>\r\n    );\r\n}\r\n \r\nexport default Photo;","import React from 'react';\r\nimport Photo from './Photo';\r\n\r\nconst PhotoList = (props) => {   \r\n  // console.log(props.match.params.search)\r\n  const images = props.data.map( photo => {\r\n    return (<Photo \r\n            key={photo.id} \r\n            url={`https://farm${photo.farm}.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}.jpg`} \r\n            alt={photo.title}  \r\n            />)\r\n    \r\n  })  \r\n\r\n  return ( \r\n      <div className=\"photo-container\">\r\n        {/* Name of the item that was searched */}\r\n        <h2> {props.match.params.search} </h2>\r\n          <ul>\r\n            {images}\r\n          </ul>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default PhotoList;","import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nclass Nav extends Component {\r\n\r\n  // Calls the onSearch function and passes the value of the button that was clicked.\r\n  searchText = e => {\r\n    this.props.onSearch(e.target.innerText);\r\n  }\r\n\r\n  // Calls the function on specific links\r\n  render() {\r\n    return ( \r\n      <nav className=\"main-nav\">\r\n        <ul>\r\n          <li><Link to=\"/cats\" onClick={this.searchText}>Cats</Link></li>\r\n          <li><Link to=\"/dogs\" onClick={this.searchText}>Dogs</Link></li>\r\n          <li><Link to=\"/computers\" onClick={this.searchText}>Computers</Link></li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Nav;","import React from 'react';\r\n\r\n// Used when there are no search results\r\nconst NotFound = () => {\r\n    return ( \r\n        <div className=\"not-found\">\r\n            <h3>No Results Found</h3>\r\n            <p>You search did not return any results. Please try again.</p>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default NotFound;","const apiKey = 'd91bf4e53ff342e8d2e94914fbedb327';\r\nexport default apiKey;","import React, {Component} from 'react';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom'\n\nimport SearchForm from './Search'\nimport PhotoList from './PhotoList'\nimport Nav from './Nav'\nimport NotFound from './NotFound'\nimport './newIndex.css';\n\nimport apiKey from './config'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = { \n        photos : []\n    }\n  }\n\n  // Calls function when page first loads\n  componentDidMount() {\n    var animal = 'cats'\n    this.doSearch(animal);\n  }\n\n  // Fetches data from flickr api \n  doSearch = (search) => {\n    let api = apiKey;\n    fetch(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${api}&tags=${search}&per_page=24&format=json&nojsoncallback=1`)\n    .then(response => response.json())\n    .then(resData => this.setState({ photos: resData.photos.photo}))\n    .catch(err => {\n        console.log(\"There is an error: \", err )\n    })\n  }\n\n  render() {\n    return (\n\n      <BrowserRouter> \n        <div className='container'>\n\n          <SearchForm onSearch={this.doSearch}/>\n          <Nav onSearch={this.doSearch} />\n\n          <Switch>\n            {/* Redirects the path to /cats when root path is searched */}\n            <Route exact path=\"/\" render={ () => <Redirect to=\"/cats\" />} />\n            \n            <Route path=\"/\" render={props => <PhotoList data={this.state.photos} {...props} />} />\n            <Route path=\"/search/:search\" render={ props => <PhotoList {...props} data={this.state.photos} /> } />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}